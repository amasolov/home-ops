---
apiVersion: v1
kind: ConfigMap
metadata:
  name: netbox-configmap
  namespace: default
data:
  authentik.py: |
    from os import environ

    SOCIAL_AUTH_OIDC_ENDPOINT = environ.get('SOCIAL_AUTH_OIDC_ENDPOINT')
    SOCIAL_AUTH_OIDC_KEY = environ.get('SOCIAL_AUTH_OIDC_KEY')
    SOCIAL_AUTH_OIDC_SECRET = environ.get('SOCIAL_AUTH_OIDC_SECRET')
    LOGOUT_REDIRECT_URL = environ.get('LOGOUT_REDIRECT_URL')
    SOCIAL_AUTH_PROTECTED_USER_FIELDS = ["groups"]
    SOCIAL_AUTH_OIDC_SCOPE = ["openid", "profile", "email", "roles"]
    SOCIAL_AUTH_PIPELINE = (
      ###################
      # Default pipelines
      ###################

      # Get the information we can about the user and return it in a simple
      # format to create the user instance later. In some cases the details are
      # already part of the auth response from the provider, but sometimes this
      # could hit a provider API.
      'social_core.pipeline.social_auth.social_details',

      # Get the social uid from whichever service we're authing thru. The uid is
      # the unique identifier of the given user in the provider.
      'social_core.pipeline.social_auth.social_uid',

      # Verifies that the current auth process is valid within the current
      # project, this is where emails and domains whitelists are applied (if
      # defined).
      'social_core.pipeline.social_auth.auth_allowed',

      # Checks if the current social-account is already associated in the site.
      'social_core.pipeline.social_auth.social_user',

      # Make up a username for this person, appends a random string at the end if
      # there's any collision.
      'social_core.pipeline.user.get_username',

      # Send a validation email to the user to verify its email address.
      # Disabled by default.
      # 'social_core.pipeline.mail.mail_validation',

      # Associates the current social details with another user account with
      # a similar email address. Disabled by default.
      # 'social_core.pipeline.social_auth.associate_by_email',

      # Create a user account if we haven't found one yet.
      'social_core.pipeline.user.create_user',

      # Create the record that associates the social account with the user.
      'social_core.pipeline.social_auth.associate_user',

      # Populate the extra_data field in the social record with the values
      # specified by settings (and the default ones like access_token, etc).
      'social_core.pipeline.social_auth.load_extra_data',

      # Update the user record with any changed info from the auth service.
      'social_core.pipeline.user.user_details',


      ###################
      # Custom pipelines
      ###################
      # Set authentik Groups
      'netbox.custom_pipeline.add_groups',
      'netbox.custom_pipeline.remove_groups',
      # Set Roles
      'netbox.custom_pipeline.set_roles'
    )
  custom_pipeline.py: |
    from netbox.authentication import Group

    class AuthFailed(Exception):
        pass

    def add_groups(response, user, backend, *args, **kwargs):
        try:
            groups = response['groups']
        except KeyError:
            pass

        # Add all groups from oAuth token
        for group in groups:
            group, created = Group.objects.get_or_create(name=group)
            group.users.add(user)

    def remove_groups(response, user, backend, *args, **kwargs):
        try:
            groups = response['groups']
        except KeyError:
            # Remove all groups if no groups in oAuth token
            user.groups.clear()
            pass

        # Get all groups of user
        user_groups = [item.name for item in user.groups.all()]
        # Get groups of user which are not part of oAuth token
        delete_groups = list(set(user_groups) - set(groups))

        # Delete non oAuth token groups
        for delete_group in delete_groups:
            group = Group.objects.get(name=delete_group)
            group.users.remove(user)


    def set_roles(response, user, backend, *args, **kwargs):
        # Remove Roles temporary
        user.is_superuser = False
        user.is_staff = False
        try:
            groups = response['groups']
        except KeyError:
            # When no groups are set
            # save the user without Roles
            user.save()
            pass

        # Set roles is role (superuser or staff) is in groups
        user.is_superuser = True if 'netbox_admins' in groups else False
        user.is_staff = True if 'netbox_staff' in groups else False
        user.save()
