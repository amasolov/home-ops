{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    "docker:enableMajor",
    ":automergeBranch",
    ":dependencyDashboard",
    ":disableRateLimiting",
    ":semanticCommits",
    ":separatePatchReleases",
    ":timezone(Australia/Sydney)"
  ],
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
  "suppressNotifications": ["prEditedNotification", "prIgnoreNotification"],
  "schedule": ["every weekend"],
  "ignorePaths": ["**/*.sops.*"],
  "flux": {
    "fileMatch": ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"]
  },
  "helm-values": {
    "fileMatch": ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"]
  },
  "helmfile": {
    "fileMatch": ["(^|/)helmfile\\.ya?ml(?:\\.j2)?$"]
  },
  "kubernetes": {
    "fileMatch": ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"]
  },
  "kustomize": {
    "fileMatch": ["(^|/)kustomization\\.ya?ml(?:\\.j2)?$"]
  },
  "pip_requirements": {
    "fileMatch": ["(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(?:\\.j2)?$"]
  },
  "packageRules": [
    {
      "description": ["Auto-merge container digests updates for trusted containers"],
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": ["digest"],
      "matchPackagePatterns": ["ghcr.io/bjw-s", "ghcr.io/onedr0p", "ghcr.io/angelnu/cni-plugins"]
    },
    {
      "description": ["Auto-merge container updates for non essential software"],
      "automerge": true,
      "automergeType": "branch",
      "matchUpdateTypes": ["minor", "patch"],
      "matchPackagePatterns": ["grafana", "intel-device-plugins", "scrypted", "paperless-ngx", "kubanetics", "external-dns", "cloudflared", "cni-plugins", "dragonfly", "coredns", "emqx-operator", "app-template", "open-webui", "external-secrets", "cert-manager", "cilium", "redis", "zitadel", "home-assistant", "vllm-stack", "loki", "netbox"]
    },
    {
      "description": ["Auto-merge GitHub Actions for minor and patch"],
      "matchManagers": ["github-actions"],
      "automerge": true,
      "automergeType": "branch",
      "ignoreTests": true,
      "matchUpdateTypes": ["minor", "patch"]
    },
    {
      "description": ["Flux Operator Group"],
      "groupName": "Flux Operator",
      "matchPackagePatterns": ["flux-operator", "flux-instance"],
      "matchDatasources": ["docker"],
      "group": {
        "commitMessageTopic": "{{{groupName}}} group"
      }
    },
    {
      "description": ["Intel Device Plugins Group"],
      "groupName": "Intel-Device-Plugins",
      "matchPackagePatterns": ["intel-device-plugins"],
      "matchDatasources": ["helm"],
      "group": {
        "commitMessageTopic": "{{{groupName}}} group"
      }
    },
    {
      "description": ["Rook-Ceph Group"],
      "groupName": "Rook-Ceph",
      "matchPackagePatterns": ["rook.ceph"],
      "matchDatasources": ["helm"],
      "group": {
        "commitMessageTopic": "{{{groupName}}} group"
      }
    },
    {
      "description": ["Talos Group"],
      "groupName": "Talos",
      "matchPackagePatterns": [
        "siderolabs/talosctl",
        "siderolabs/installer"
      ],
      "matchDatasources": ["docker"],
      "group": {
        "commitMessageTopic": "{{{groupName}}} group"
      }
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(container)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": " ( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "container",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "container",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["digest"],
      "semanticCommitType": "chore",
      "semanticCommitScope": "container",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentDigestShort}} â†’ {{newDigestShort}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(helm)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "helm",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "helm",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(github-release)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "github-release",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "github-release",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(github-action)!: ",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "semanticCommitScope": "github-action",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchManagers": ["github-actions"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "semanticCommitScope": "github-action",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "( {{currentVersion}} â†’ {{newVersion}} )"
    },
    {
      "matchUpdateTypes": ["major"],
      "labels": ["type/major"]
    },
    {
      "matchUpdateTypes": ["minor"],
      "labels": ["type/minor"]
    },
    {
      "matchUpdateTypes": ["patch"],
      "labels": ["type/patch"]
    },
    {
      "matchDatasources": ["docker"],
      "addLabels": ["renovate/container"]
    },
    {
      "matchDatasources": ["helm"],
      "addLabels": ["renovate/helm"]
    },
    {
      "matchDatasources": ["github-releases", "github-tags"],
      "addLabels": ["renovate/github-release"]
    },
    {
      "matchManagers": ["github-actions"],
      "addLabels": ["renovate/github-action"]
    }
  ],
  "customManagers": [
    {
      "customType": "regex",
      "description": ["Process YAML custom dependencies"],
      "fileMatch": ["(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$"],
      "matchStrings": [
        "datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+(:\\s|=)(&\\S+\\s)?(?<currentValue>\\S+)"
      ],
      "datasourceTemplate": "{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}"
    },
    {
      "customType": "regex",
      "description": ["Process any imageName keys in YAML files (cloudnative-pg)"],
      "fileMatch": ["(^|/)kubernetes/.+\\.ya?ml$"],
      "matchStrings": ["imageName: (?<depName>[^\\s:]+):(?<currentValue>\\S+)(@(?<currentDigest>sha256:\\S+)?)"],
      "datasourceTemplate": "docker"
    }
  ]
}
